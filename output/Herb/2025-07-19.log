symtom个数n_users=360, herb个数n_items=753
#train中的herb个数 train_items 753
#test中的herb个数 test_items 468
#总的herb个数 all_items 753
#用于sample生成batch的train pres 22917
#train中 症状组合-单个herb pair的个数 n_train 22917, #test 行数 n_test 1162
item_weight  753
item_freq_max  9017.0
753   1
#multi-hot for test users	 1162
#test	 1162
#双向 sym pairs  1914
#双向herb pairs  6818
start  2025-07-19 21:08:51
************SMGCN*************** 
result_index  1
already create adjacency matrix (1113, 1113) time: 0.05127549171447754
already create sym_pair adjacency matrix (360, 360) time: 0.0012774467468261719
already create herb_pair adjacency matrix (753, 753) time: 0.003284931182861328
generate single-normalized adjacency matrix.
generate single-normalized adjacency matrix.
already normalize adjacency matrix 0.03838968276977539
sym_pair 和 herb_pair 有 self-connection, sum!!
Epoch is set: 2000
use the normalized adjacency matrix
emb_dim:  64
***********fusion method************  add
mlp predict weight  [256]
mlp_predict layer  1
regs  [0.007]
using xavier initialization
mlp_predict_weight_size_list  [256, 256]

 ########################################################################### pair_dimension is  256
SMGCN(
  (weights): ParameterDict(
      (user_embedding): Parameter containing: [torch.cuda.FloatTensor of size 360x64 (GPU 0)]
      (item_embedding): Parameter containing: [torch.cuda.FloatTensor of size 753x64 (GPU 0)]
      (W_gc_user_0): Parameter containing: [torch.cuda.FloatTensor of size 128x128 (GPU 0)]
      (b_gc_user_0): Parameter containing: [torch.cuda.FloatTensor of size 1x128 (GPU 0)]
      (W_gc_item_0): Parameter containing: [torch.cuda.FloatTensor of size 128x128 (GPU 0)]
      (b_gc_item_0): Parameter containing: [torch.cuda.FloatTensor of size 1x128 (GPU 0)]
      (Q_user_0): Parameter containing: [torch.cuda.FloatTensor of size 64x64 (GPU 0)]
      (Q_item_0): Parameter containing: [torch.cuda.FloatTensor of size 64x64 (GPU 0)]
      (W_gc_user_1): Parameter containing: [torch.cuda.FloatTensor of size 256x256 (GPU 0)]
      (b_gc_user_1): Parameter containing: [torch.cuda.FloatTensor of size 1x256 (GPU 0)]
      (W_gc_item_1): Parameter containing: [torch.cuda.FloatTensor of size 256x256 (GPU 0)]
      (b_gc_item_1): Parameter containing: [torch.cuda.FloatTensor of size 1x256 (GPU 0)]
      (Q_user_1): Parameter containing: [torch.cuda.FloatTensor of size 128x128 (GPU 0)]
      (Q_item_1): Parameter containing: [torch.cuda.FloatTensor of size 128x128 (GPU 0)]
      (W_predict_mlp_user_0): Parameter containing: [torch.cuda.FloatTensor of size 256x256 (GPU 0)]
      (b_predict_mlp_user_0): Parameter containing: [torch.cuda.FloatTensor of size 1x256 (GPU 0)]
      (M_user): Parameter containing: [torch.cuda.FloatTensor of size 64x256 (GPU 0)]
      (M_item): Parameter containing: [torch.cuda.FloatTensor of size 64x256 (GPU 0)]
  )
)
args.pretrain	 0
/home/zhang/Projects/Yuan/SMGCN-torch-master/model/SMGCN.py:190: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  ../torch/csrc/utils/tensor_new.cpp:201.)
  i = torch.tensor([coo.row, coo.col], dtype=torch.long).to(args.device)
Epoch 0 [3.4s]: train==[7346607.21891=7346578.43750 + 0.00782 + 0.00000 + 0.00000 + 135.39974 + 152.41433]
Epoch 1 [3.3s]: train==[6166622.39073=6166593.60938 + 0.01627 + 0.00000 + 0.00000 + 135.39904 + 152.41449]
Epoch 2 [3.3s]: train==[4833621.67164=4833592.89062 + 0.03652 + 0.00000 + 0.00000 + 135.39828 + 152.41181]
